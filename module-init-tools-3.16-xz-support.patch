--- module-init-tools-3.16/configure.ac.xz~	2012-01-06 14:02:10.042305850 +0100
+++ module-init-tools-3.16/configure.ac	2012-01-06 14:02:10.078305797 +0100
@@ -29,6 +29,24 @@ AC_ARG_ENABLE(zlib-dynamic,
   zlib_flags="-lz"
 fi])
 
+# If liblzma is required, liblzma must be linked static, modprobe is in
+# /sbin, liblzma is in /usr/lib and may not be available when it is run.
+AC_ARG_ENABLE(liblzma,
+[  --enable-liblzma            Handle xz compressed modules],
+[if test "$enableval" = "yes"; then
+  AC_DEFINE(CONFIG_USE_LIBLZMA)
+  liblzma_flags="-Wl,-Bstatic -llzma -Wl,-Bdynamic"
+fi])
+
+AC_ARG_ENABLE(liblzma-dynamic,
+[  --enable-liblzma-dynamic    Handle xz modules, liblzma will be linked
+                               dynamically. Note that liblzma must be installed
+                               in /lib for this to work.],
+[if test "$enableval" = "yes"; then
+  AC_DEFINE(CONFIG_USE_LIBLZMA)
+  liblzma_flags="-llzma"
+fi])
+
 AC_PROG_CC
 AC_PROG_RANLIB
 
@@ -42,7 +60,7 @@ fi
  
 # Delay adding the zlib_flags until after AC_PROG_CC, so we can distinguish
 # between a broken cc and a working cc but missing libz.a.
-LDADD="$LDADD $zlib_flags"
+LDADD="$LDADD $zlib_flags $liblzma_flags"
 AC_SUBST(LDADD)
 
 case $target in
--- module-init-tools-3.16/depmod.c.xz~	2012-01-06 14:02:10.069305811 +0100
+++ module-init-tools-3.16/depmod.c	2012-01-06 14:02:10.078305797 +0100
@@ -706,7 +706,7 @@ static int output_deps_bin(struct module
  */
 static int smells_like_module(const char *name)
 {
-	return ends_in(name,".ko") || ends_in(name, ".ko.gz");
+	return ends_in(name,".ko") || ends_in(name, ".ko.gz") || ends_in(name, ".ko.xz");
 }
 
 typedef struct module *(*do_module_t)(const char *dirname,
--- module-init-tools-3.16/Makefile.am.xz~	2012-01-06 14:02:10.062305820 +0100
+++ module-init-tools-3.16/Makefile.am	2012-01-06 14:26:08.358146124 +0100
@@ -7,7 +7,7 @@ libtool: $(LIBTOOL_DEPS)
 
 lib_LTLIBRARIES = libmodprobe.la
 libmodprobe_la_SOURCES = libmodprobe.c logging.c index.c zlibsupport.c config_filter.c zlibsupport.h logging.h index.h config_filter.h util.c util.h
-libmodprobe_la_LDFLAGS = -version-info 1:0:0 -lz
+libmodprobe_la_LDFLAGS = -version-info 1:0:0 -lz -llzma
 
 insmod_SOURCES = insmod.c testing.h
 lsmod_SOURCES = lsmod.c testing.h
@@ -42,13 +42,13 @@ libmodtools_a_CFLAGS = -ffunction-sectio
 
 EXTRA_libmodtools_a_SOURCES = elfops_core.c
 
-insmod_LDADD = $(LDADD) libmodtools.a
-lsmod_LDADD = $(LDADD) libmodtools.a
-modprobe_LDADD = $(LDADD) libmodtools.a
-rmmod_LDADD = $(LDADD) libmodtools.a
-depmod_LDADD = $(LDADD) libmodtools.a
-modinfo_LDADD = $(LDADD) libmodtools.a
-modindex_LDADD = $(LDADD) libmodtools.a
+insmod_LDADD = libmodtools.a $(LDADD)
+lsmod_LDADD = libmodtools.a $(LDADD)
+modprobe_LDADD = libmodtools.a $(LDADD)
+rmmod_LDADD = libmodtools.a $(LDADD)
+depmod_LDADD = libmodtools.a $(LDADD)
+modinfo_LDADD = libmodtools.a $(LDADD)
+modindex_LDADD = libmodtools.a $(LDADD)
 
 MAN5 = depmod.conf.5 depmod.d.5 modprobe.conf.5 modprobe.d.5 \
 	modules.dep.5 modules.dep.bin.5
--- module-init-tools-3.16/testing.h.xz~	2011-06-02 19:55:01.000000000 +0200
+++ module-init-tools-3.16/testing.h	2012-01-06 14:02:10.079305796 +0100
@@ -239,6 +239,50 @@ static gzFile *modtest_gzopen(const char
 }
 #endif
 
+#ifdef CONFIG_USE_LIBLZMA
+#include <lzma.h>
+er
+typedef struct lzma_file {
+	uint8_t buf[1<<14];
+	lzma_stream strm;
+	FILE *fp;
+	lzma_bool eof;
+} lzma_FILE;
+
+static lzma_FILE *lzma_open(lzma_ret *lzma_error, FILE *fp, const char *filename, const char *mode)
+{
+	lzma_ret *ret = lzma_error;
+	lzma_FILE *lzma_file;
+	lzma_stream tmp = LZMA_STREAM_INIT;
+
+	lzma_file = calloc(1, sizeof(*lzma_file));
+
+	lzma_file->fp = (fp == NULL) ? fopen(filename, mode) : fp;
+	lzma_file->eof = 0;
+	lzma_file->strm = tmp;
+
+	*ret = lzma_auto_decoder(&lzma_file->strm, -1, 0);
+
+	if (*ret != LZMA_OK) {
+		(void) fclose(lzma_file->fp);
+		free(lzma_file);
+		return NULL;
+	}
+	return lzma_file;
+}
+static lzma_FILE *modtest_lzma_open(lzma_ret *ret, FILE *fp, const char *filename, const char *mode)
+__attribute__((unused));
+
+static lzma_FILE *modtest_lzma_open(lzma_ret *ret, FILE *fp, const char *filename, const char *mode)
+{
+	return lzma_open(ret, fp, modtest_mapname(filename), mode);
+}
+typedef unsigned char lzma_bool;
+typedef	int lzma_ret;
+#define	LZMA_OK 1
+#endif
+
+
 /* create_module call */
 #undef create_module
 #define create_module modtest_create_module
@@ -256,6 +300,7 @@ static gzFile *modtest_gzopen(const char
 #define readlink modtest_readlink
 #define unlink modtest_unlink
 #define gzopen modtest_gzopen
+#define lzma_open modtest_lzma_open
 
 #endif /* JUST_TESTING */
 #endif /* _TESTING_H */
--- module-init-tools-3.16/zlibsupport.c.xz~	2012-01-06 14:02:10.072305805 +0100
+++ module-init-tools-3.16/zlibsupport.c	2012-01-06 14:02:10.079305796 +0100
@@ -2,6 +2,7 @@
  * did the support for modutils, Andrey Borzenkov <arvidjaar@mail.ru>
  * ported it to module-init-tools, and I said it was too ugly to live
  * and rewrote it 8).
+ * Rewritten by Per Ã˜yvind Karlsen <peroyvind@mandriva.org> to add xz support
  *
  * (C) 2003 Rusty Russell, IBM Corporation.
  */
@@ -12,6 +13,8 @@
 #include <stdlib.h>
 #include <unistd.h>
 #include <sys/mman.h>
+#include <stdio.h>
+#include <errno.h>
 
 #include "zlibsupport.h"
 #include "logging.h"
@@ -19,15 +22,199 @@
 
 #ifdef CONFIG_USE_ZLIB
 #include <zlib.h>
+#ifdef CONFIG_USE_LIBLZMA
+#include <lzma.h>
+
+typedef struct lzma_file {
+	uint8_t buf[1<<14];
+	lzma_stream strm;
+	FILE *fp;
+	lzma_bool eof;
+} lzma_FILE;
+#else
+typedef unsigned char lzma_bool;
+typedef	int lzma_ret;
+#define	LZMA_OK 0
+#endif
+
+typedef enum xFile_e {
+	XF_NONE,
+	XF_GZIP,
+	XF_XZ,
+	XF_FAIL
+} xFile_t;
+
+typedef struct xFile_s {
+	xFile_t type;
+	lzma_bool eof;
+	union {
+		gzFile gz;
+#ifdef CONFIG_USE_LIBLZMA
+		lzma_FILE *xz;
+#endif
+	} f;
+	FILE *fp;
+} xFile;
+
+#ifdef CONFIG_USE_LIBLZMA
+static lzma_FILE *lzma_open(lzma_ret *lzma_error, FILE *fp)
+{
+	lzma_ret *ret = lzma_error;
+	lzma_FILE *lzma_file;
+	lzma_stream tmp = LZMA_STREAM_INIT;
+
+	lzma_file = calloc(1, sizeof(*lzma_file));
+
+	lzma_file->fp = fp;
+	lzma_file->eof = 0;
+	lzma_file->strm = tmp;
+
+	*ret = lzma_auto_decoder(&lzma_file->strm, -1, 0);
+
+	if (*ret != LZMA_OK) {
+		(void) fclose(lzma_file->fp);
+		free(lzma_file);
+		return NULL;
+	}
+	return lzma_file;
+}
+
+static ssize_t lzma_read(lzma_ret *lzma_error, lzma_FILE *lzma_file, void *buf, size_t len)
+{
+	lzma_ret *ret = lzma_error;
+	lzma_bool eof = 0;
+
+	if (!lzma_file)
+		return -1;
+	if (lzma_file->eof)
+		return 0;
+
+	lzma_file->strm.next_out = buf;
+	lzma_file->strm.avail_out = len;
+	for (;;) {
+		if (!lzma_file->strm.avail_in) {
+			lzma_file->strm.next_in = (uint8_t *)lzma_file->buf;
+			lzma_file->strm.avail_in = fread(lzma_file->buf, 1, sizeof(lzma_file->buf), lzma_file->fp);
+			if (!lzma_file->strm.avail_in)
+				eof = 1;
+		}
+		*ret = lzma_code(&lzma_file->strm, LZMA_RUN);
+		if (*ret == LZMA_STREAM_END) {
+			lzma_file->eof = 1;
+			return len - lzma_file->strm.avail_out;
+		}
+		if (*ret != LZMA_OK)
+			return -1;
+		if (!lzma_file->strm.avail_out)
+			return len;
+		if (eof)
+			return -1;
+	}
+}
+#endif
+
+static xFile xOpen(int fd, const char *filename) {
+	xFile xF = {XF_FAIL, 0, {NULL}, NULL};
+	lzma_ret ret = LZMA_OK;
+	unsigned char buf[8];
+
+	if (fd == -1 && filename != NULL)
+		if ((fd = open(filename, O_RDONLY)) < 0)
+			return xF;
+	if (read(fd, buf, sizeof(buf)) < 0)
+		return xF;
+	lseek(fd, 0, SEEK_SET);
+	if (filename != NULL) {
+		close(fd);
+		fd = -1;
+	}
+	if (buf[0] == 0xFD && buf[1] == '7' && buf[2] == 'z' &&
+			buf[3] == 'X' && buf[4] == 'Z' && buf[5] == 0x00)
+		xF.type = XF_XZ;
+	else if (buf[0] == 0x1F && buf[1] == 0x8B)
+		xF.type = XF_GZIP;
+	else
+		xF.type = XF_NONE;
+
+	switch(xF.type) {
+		case XF_GZIP:
+			xF.f.gz = (fd == -1 && filename != NULL) ? gzopen(filename, "rb") : gzdopen(fd, "rb");
+			if(xF.f.gz == NULL)
+				xF.type = XF_FAIL;
+			break;
+		case XF_NONE:
+			xF.fp = (fd == -1 && filename != NULL) ? fopen(filename, "rb") : fdopen(fd, "rb");
+			break;
+#ifdef CONFIG_USE_LIBLZMA
+		case XF_XZ:
+			xF.fp = (fd == -1 && filename != NULL) ? fopen(filename, "rb") : fdopen(fd, "rb");
+			if(xF.fp == NULL)
+				xF.type = XF_FAIL;
+			if(xF.type == XF_NONE || xF.type == XF_FAIL) break;
+			xF.f.xz = lzma_open(&ret, xF.fp);
+			if(ret != LZMA_OK)
+				xF.type = XF_FAIL;
+			break;
+#endif
+		default:
+			break;
+	}
+
+	return xF;
+}
+
+static int xClose(xFile *xF) {
+	int ret = -1;
+	switch(xF->type) {
+		case XF_GZIP:
+			ret = gzclose(xF->f.gz);
+			break;
+#ifdef CONFIG_USE_LIBLZMA
+		case XF_XZ:
+			lzma_end(&xF->f.xz->strm);
+			free(xF->f.xz);
+#endif
+		case XF_NONE:
+			ret = fclose(xF->fp);
+			break;
+		default:
+			break;
+	}
+	return ret;
+}
+
+static ssize_t xRead(xFile *xF, lzma_ret *ret, void *buf, size_t len) {
+	ssize_t sz;
+	switch(xF->type) {
+		case XF_GZIP:
+			sz = gzread(xF->f.gz, buf, len);
+			xF->eof = gzeof(xF->f.gz);
+			break;
+#ifdef CONFIG_USE_LIBLZMA
+		case XF_XZ:
+			sz = lzma_read(ret, xF->f.xz, buf, len);
+			xF->eof = xF->f.xz->eof;
+			break;
+#endif
+		case XF_NONE:
+			sz = fread(buf, 1, len, xF->fp);
+			xF->eof = feof(xF->fp);
+			break;
+		default:
+			sz = -1;
+			break;
+	}
+	return sz;
+}
 
-void *grab_contents(gzFile *gzfd, unsigned long *size)
+void *grab_contents(xFile *xF, unsigned long *size)
 {
 	unsigned int max = 16384;
-	void *buffer = NOFAIL(malloc(max));
-	int ret;
+	void *buffer = NOFAIL(calloc(1, max));
+	lzma_ret ret;
 
 	*size = 0;
-	while ((ret = gzread(gzfd, buffer + *size, max - *size)) > 0) {
+	while ((ret = xRead(xF, &ret, buffer + *size, max - *size)) > 0) {
 		*size += ret;
 		if (*size == max)
 			buffer = NOFAIL(realloc(buffer, max *= 2));
@@ -43,18 +230,18 @@ void *grab_contents(gzFile *gzfd, unsign
 /* gzopen handles uncompressed files transparently. */
 void *grab_file(const char *filename, unsigned long *size)
 {
-	gzFile gzfd;
+	xFile xF;
 	void *buffer;
 
 	errno = 0;
-	gzfd = gzopen(filename, "rb");
-	if (!gzfd) {
+	xF = xOpen(-1, filename);
+	if (xF.type == XF_FAIL) {
 		if (errno == ENOMEM)
 			mod_fatal("Memory allocation failure in gzopen\n");
 		return NULL;
 	}
-	buffer = grab_contents(gzfd, size);
-	gzclose(gzfd);
+	buffer = grab_contents(&xF, size);
+	xClose(&xF);
 	return buffer;
 }
 
